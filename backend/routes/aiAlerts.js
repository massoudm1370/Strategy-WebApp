const express = require('express');
const router = express.Router();
const axios = require('axios');
require('dotenv').config();
console.log('HUGGINGFACE_API_KEY:', process.env.HUGGINGFACE_API_KEY ? '‚úÖ Loaded' : '‚ùå Not Loaded');

const useAI = process.env.USE_AI_ALERTS === 'true';
const huggingFaceModelUrl = 'https://api-inference.huggingface.co/models/gpt2'; // €åÿß Ÿáÿ± ŸÖÿØŸÑ ÿØŸÑÿÆŸàÿßŸá

// üìå ŸÖÿ≥€åÿ± Ÿáÿ¥ÿØÿßÿ± ÿßŸáÿØÿßŸÅ ÿ≥ÿßÿ≤ŸÖÿßŸÜ€å
router.get('/goals/alerts', async (req, res) => {
  try {
    const db = req.db;
    const stmt = db.prepare("SELECT id, title, currentStatus FROM goals WHERE currentStatus < 50");
    const keyResults = stmt.all();

    if (!keyResults.length) {
      return res.json({ alerts: "‚úÖ ŸáŸÖŸá ÿßŸáÿØÿßŸÅ ÿ≥ÿßÿ≤ŸÖÿßŸÜ€å ÿØÿ± Ÿàÿ∂ÿπ€åÿ™ ŸÖŸÜÿßÿ≥ÿ®€å Ÿáÿ≥ÿ™ŸÜÿØ." });
    }

    if (useAI) {
      const aiPrompt = `ÿßŸáÿØÿßŸÅ ÿ≤€åÿ± ⁄©ŸÖÿ™ÿ± ÿßÿ≤ 50 ÿØÿ±ÿµÿØ Ÿæ€åÿ¥ÿ±ŸÅÿ™ ÿØÿßÿ¥ÿ™Ÿá‚ÄåÿßŸÜÿØ:\n${keyResults.map(kr => `- ${kr.title}: ${kr.currentStatus}%`).join('\n')}`;
      const huggingFaceResponse = await axios.post(
        huggingFaceModelUrl,
        { inputs: aiPrompt },
        {
          headers: {
            'Content-Type': 'application/json',
            ...(process.env.HUGGINGFACE_API_KEY && { 'Authorization': `Bearer ${process.env.HUGGINGFACE_API_KEY}` })
          },
          timeout: 10000
        }
      );
      return res.json({ alerts: huggingFaceResponse.data });
    }

    const message = `ÿßŸáÿØÿßŸÅ ÿ≤€åÿ± ⁄©ŸÖÿ™ÿ± ÿßÿ≤ 50% Ÿæ€åÿ¥ÿ±ŸÅÿ™ ÿØÿßÿ¥ÿ™Ÿá‚ÄåÿßŸÜÿØ:\n${keyResults.map(kr => `- ${kr.title}: ${kr.currentStatus}%`).join('\n')}`;
    res.json({ alerts: message });

  } catch (error) {
    console.error("‚ùå ÿÆÿ∑ÿß€å ÿØÿßÿÆŸÑ€å ÿØÿ± /goals/alerts:", error.message);
    res.status(500).json({ error: "ÿÆÿ∑ÿß€å ÿØÿßÿÆŸÑ€å ÿ≥ÿ±Ÿàÿ±" });
  }
});

// üìå ŸÖÿ≥€åÿ± Ÿáÿ¥ÿØÿßÿ± ÿßŸáÿØÿßŸÅ ÿØŸæÿßÿ±ÿ™ŸÖÿßŸÜ€å
router.get('/department-goals/alerts', async (req, res) => {
  try {
    const db = req.db;
    const stmt = db.prepare("SELECT id, keyResult, finalAchievement FROM department_goals WHERE finalAchievement < 50");
    const keyResults = stmt.all();

    if (!keyResults.length) {
      return res.json({ alerts: "‚úÖ ŸáŸÖŸá ÿßŸáÿØÿßŸÅ ÿØŸæÿßÿ±ÿ™ŸÖÿßŸÜ€å ÿØÿ± Ÿàÿ∂ÿπ€åÿ™ ŸÖŸÜÿßÿ≥ÿ®€å Ÿáÿ≥ÿ™ŸÜÿØ." });
    }

    if (useAI) {
      const aiPrompt = `ÿßŸáÿØÿßŸÅ ÿ≤€åÿ± ⁄©ŸÖÿ™ÿ± ÿßÿ≤ 50 ÿØÿ±ÿµÿØ Ÿæ€åÿ¥ÿ±ŸÅÿ™ ÿØÿßÿ¥ÿ™Ÿá‚ÄåÿßŸÜÿØ:\n${keyResults.map(kr => `- ${kr.keyResult}: ${kr.finalAchievement}%`).join('\n')}`;
      const huggingFaceResponse = await axios.post(
        huggingFaceModelUrl,
        { inputs: aiPrompt },
        {
          headers: {
            'Content-Type': 'application/json',
            ...(process.env.HUGGINGFACE_API_KEY && { 'Authorization': `Bearer ${process.env.HUGGINGFACE_API_KEY}` })
          },
          timeout: 10000
        }
      );
      return res.json({ alerts: huggingFaceResponse.data });
    }

    const message = `ÿßŸáÿØÿßŸÅ ÿ≤€åÿ± ⁄©ŸÖÿ™ÿ± ÿßÿ≤ 50% Ÿæ€åÿ¥ÿ±ŸÅÿ™ ÿØÿßÿ¥ÿ™Ÿá‚ÄåÿßŸÜÿØ:\n${keyResults.map(kr => `- ${kr.keyResult}: ${kr.finalAchievement}%`).join('\n')}`;
    res.json({ alerts: message });

  } catch (error) {
    console.error("‚ùå ÿÆÿ∑ÿß€å ÿØÿßÿÆŸÑ€å ÿØÿ± /department-goals/alerts:", error.message);
    res.status(500).json({ error: "ÿÆÿ∑ÿß€å ÿØÿßÿÆŸÑ€å ÿ≥ÿ±Ÿàÿ±" });
  }
});

// üìå ŸÖÿ≥€åÿ± ÿ™ÿ≥ÿ™ ŸÖÿ≥ÿ™ŸÇ€åŸÖ Hugging Face
router.get('/test-openai', async (req, res) => {
  try {
    const response = await axios.post(
      huggingFaceModelUrl,
      { inputs: "Hello from DigiExpress" },
      {
        headers: {
          'Content-Type': 'application/json',
          ...(process.env.HUGGINGFACE_API_KEY && { 'Authorization': `Bearer ${process.env.HUGGINGFACE_API_KEY}` })
        },
        timeout: 10000
      }
    );

    res.json({ reply: response.data });
  } catch (error) {
    console.error("‚ùå Error contacting Hugging Face:", error.message);
    res.status(500).json({ error: error.message });
  }
});

module.exports = router;
